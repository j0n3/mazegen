/*
 * Copyright (c) 2018 Nicolas Maltais
 *
 * Permission is hereby granted, free of charge,
 * to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to
 * deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom
 * the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.maltaisn.maze.generator

import com.maltaisn.maze.maze.Cell
import com.maltaisn.maze.maze.Maze


/**
 * Implementation of the hunt-and-kill algorithm for maze generation as described
 * [here](http://weblog.jamisbuck.org/2011/1/24/maze-generation-hunt-and-kill-algorithm).
 *
 * 1. Make the initial cell the current cell and mark it as visited.
 * 2. Kill: Randomly connect the current cell with an unvisited neighbor, changing the
 *          current cell to the neighbor, until there are no more unvisited neighbors.
 * 3. Hunt: Find a visited cell with an unvisited neighbor. Make it the current cell.
 *          If there's none, the maze is done.
 *
 * Generated mazes are very similar to those generated by the recursive backtracker,
 * because the only difference in the algorithm is that instead of backtracking, it
 * chooses a cell at random from those already visited. That also makes it much slower.
 */
class HuntKillGenerator : Generator() {

    override fun generate(maze: Maze) {
        maze.reset(false)

        val visitedCells = ArrayList<Cell>(maze.getCellCount())

        // Get and mark the initial cell as visited
        var currentCell = maze.getRandomCell()
        currentCell.visited = true
        visitedCells.add(currentCell)

        while (true) {
            // Kill: perform random walk until cell has no unvisited neighbors
            while (true) {
                // Find an unvisited neighbor cell
                val neighbor = currentCell.getNeighbors().shuffled().find { !it.visited }
                if (neighbor != null) {
                    // Connect with current cell
                    currentCell.connectWith(neighbor)

                    // Make the connected cell the current cell, mark it as visited
                    currentCell = neighbor
                    currentCell.visited = true
                    visitedCells.add(currentCell)
                } else {
                    // No unvisited neighbor cell
                    break
                }
            }

            // Hunt: find a visited cell with an unvisited neighbor
            var found = false
            while (visitedCells.size > 0) {
                val index = random.nextInt(visitedCells.size)
                val cell = visitedCells[index]
                if (cell.getNeighbors().find { !it.visited } != null) {
                    // Found one
                    currentCell = cell
                    found = true
                    break
                } else {
                    // Visited cells has no unvisited neighbor,
                    // remove it to prevent checking again in the future
                    visitedCells.removeAt(index)
                }
            }
            if (!found) {
                // There are no unvisited cells left, maze is done
                break
            }
        }
    }

}